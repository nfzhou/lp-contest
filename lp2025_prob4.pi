% https://github.com/lpcp-contest/lpcp-contest-2025/tree/main/problem-4

import sat, util.

main =>
    main([stdin]).

main([File]) =>
    (File == stdin -> IS = stdin; IS = open(File)),
    [N,M,K] = [X.to_int() : X in IS.readln().split()],
    Es = [],
    foreach (I in 1..M)
        [V1,V2] = [X.to_int() : X in IS.readln().split()],
        Es := [(V1,V2)|Es],
    end,
    Ps = [],
    foreach (I in 1..K)
        [V1,V2] = [X.to_int() : X in IS.readln().split()],
        Ps := [(V1,V2)|Ps]
    end,
    close(IS),
    between(K,-1,1,K1),
    choose(Ps,K,K1,ChosenPs),
    find(N,Es,to_array(ChosenPs)).

choose(Ps,K,K1,ChosenPs), K1 > K => fail.
choose(Ps,K,K1,ChosenPs), K == K1 => ChosenPs = Ps.
choose([P|Ps],K,K1,ChosenPs) ?=>
    ChosenPs = [P|ChosenPs1],
    choose(Ps,K-1,K1-1,ChosenPs1).
choose([_|Ps],K,K1,ChosenPs) =>
    choose(Ps,K-1,K1,ChosenPs).

find(N,Es0,PsArray) =>
    K = len(PsArray),
    EsArray = new_array(K),
    foreach (I in 1..K)
        (S,D) = PsArray[I],
        Vs = [{V,_} : V in 1..N],
        Es = [{V1,V2,B} : (V1,V2) in Es0, B :: 0..1],
        EsArray[I] = Es,
        path(Vs,Es,S,D)
    end,
    foreach ((V1,V2) in Es0)
        sum([B : I in 1..K, member({V1,V2,B}, EsArray[I])]) #=< 1
    end,
    solve(EsArray),
    println(K),
    foreach (I in 1..K)
        (S,D) = PsArray[I],
        output_path(S,D,[S],EsArray[I])
    end.

output_path(V,V,Visited,Es) => 
    printf("%w\n",V).
output_path(V,D,Visited,Es) => 
    (member({V,T,1},Es); member({T,V,1},Es)),
    not member(T,Visited),
    printf("%w ",V),
    output_path(T,D,[T|Visited],Es).
    

    

