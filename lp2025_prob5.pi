% https://github.com/lpcp-contest/lpcp-contest-2025/tree/main/problem-5

import cp, util.

main =>
    main([stdin]).

main([File]) =>
    (File == stdin -> IS = stdin; IS = open(File)),
    N = to_int(readln(IS)),
    M = new_array(N),
    foreach (I in 1..N)
        M[I] = {to_int(X) : X in IS.readln().split()}
    end,
    close(IS),
    N2 = N*N,
    between(N2-N, -1, 1, K),
    Ps = [(R,C) : R in 1..N, C in 1..N],
    choose(Ps,N2,K,ChosenPs),   % choose cells to be changed to variables
    MapPs = new_set(ChosenPs),
    A = new_array(N,N),
    foreach (R in 1..N, C in 1..N, not MapPs.has_key((R,C)))
        A[R,C] = M[R,C]
    end,
    A :: 1..N,
    foreach (I in 1..N)
        all_different(A[I]),
        all_different([A[R,I] : R in 1..N])
    end,
    
    solve_all([$limit(2)],A) = [_],
    output(M,MapPs).    
    
choose(Ps,K,K1,ChosenPs), K1 > K => fail.
choose(Ps,K,K1,ChosenPs), K == K1 => ChosenPs = Ps.
choose([P|Ps],K,K1,ChosenPs) ?=>
    ChosenPs = [P|ChosenPs1],
    choose(Ps,K-1,K1-1,ChosenPs1).
choose([_|Ps],K,K1,ChosenPs) =>
    choose(Ps,K-1,K1,ChosenPs).

output(M,MapPs) =>
    N = len(M),
    foreach (R in 1..N)
        foreach (C in 1..N)
            if MapPs.has_key((R,C)) then
                printf("%w ",0)
            else
                printf("%w ",M[R,C])
            end
        end,
        nl
    end.

    